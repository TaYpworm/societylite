################################################################################
#   SecurityCheck.object - Security Verification Tool (Built-in Object) in
#   IOsity v4.0
#   Copyright (C) 2001, 2002  Brian Westphal
#   
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#   
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#   
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
################################################################################

sub object_SecurityCheck_inGroup ()
{
	my $findgroup = $_[0];
	
	my @groups = split (",", $VARIABLES {"#PARAM Groups"});
	foreach my $group (@groups)
	{
		if ($group eq $findgroup)
		{
			return 1;
		}
	}
	
	return 0;
}

sub object_SecurityCheck_handleEvent ()
{
	my $event            = $_[0];
	my $value            = $_[1];
	my $name             = $_[2];
	my $databasefilename = $_[3];

	my $checktype = "old";
	if ($event eq "LoginAttempt") { $checktype = "new"; }

	return ($name, $databasefilename, $checktype);
}

# 0            1           2        3          4             5           6        7
#ID<,>First Name<,>Last Name<,>UserName<,>Password<,>EncPassword<,>Last Used<,>Groups<;>
sub object_SecurityCheck ()
{
	my $name             = $_[0];
	my $databasefilename = $_[1];
	my $checktype        = $_[2];
	
	if ($VARIABLES {"Mode"} ne "")
	{
		$VARIABLES {"Mode"} = "OutputToWebpageFile";
		return "Switch Modes";
	}
	
	sub RandomPassword ()
	{
		return rand ();
	}
	
	my $username, $password;
	if ($checktype eq "new")
	{
		$username = $VARIABLES {"#PARAM username_text"};
		$password = crypt ($VARIABLES {"#PARAM password_text"}, uc (substr ($VARIABLES {"#PARAM password_text"}, 0, 2)));
	}
	else
	{
		$username = $VARIABLES {"#PARAM Username"};
		$password = $VARIABLES {"#PARAM Password"};
	}

	my $loginfailure = 0;
	my $loginfound   = 0;

	my $filename = &_lib_iosity_SetFilename ($databasefilename, "database");
	open (fHANDLE, "+<" . $filename);
	flock (fHANDLE, 2);
	@users = split (/<;>\n|<,>/, join ("", (<fHANDLE>)));

	for (my $index = 0; $index < @users / 8; $index++)
	{
		if ($users[$index * 8 + 3] eq $username)
		{
			$loginfound = 1;
			if ($checktype eq "new")
			{
				if ($users[$index * 8 + 4] eq $password)
				{
					$users[$index * 8 + 5] = &RandomPassword ();
					$users[$index * 8 + 6] = time ();

					$VARIABLES {"#PARAM Id"}       = $users[$index * 8 + 0];
					$VARIABLES {"#PARAM Username"} = $users[$index * 8 + 3];
					$VARIABLES {"#PARAM Groups"}   = $users[$index * 8 + 7];
					&AddParameter ("Username", $users[$index * 8 + 3]);
					&AddParameter ("Password", $users[$index * 8 + 5]);
				}
				else
				{
					$loginfailure = 1;
					$users[$index * 8 + 6] = 0;
				}
			}
			else
			{
				if ($users[$index * 8 + 5] eq $password && time () - $users[$index * 8 + 6] < 300)
				{
					$users[$index * 8 + 6] = time ();

					$VARIABLES {"#PARAM Id"}       = $users[$index * 8 + 0];
					$VARIABLES {"#PARAM Username"} = $users[$index * 8 + 3];
					$VARIABLES {"#PARAM Groups"}   = $users[$index * 8 + 7];
					&AddParameter ("Username", $users[$index * 8 + 3]);
					&AddParameter ("Password", $users[$index * 8 + 5]);
				}
				else
				{
					$loginfailure = 1;
					$users[$index * 8 + 6] = 0;
				}
			}
		}
	}

	if ($loginfound)
	{
		seek (fHANDLE, 0, SEEK_SET);
		my $length = 0;
		for (my $index = 0; $index < @users / 8; $index++)
		{
			my $output = $users[$index * 8 + 0] . "<,>" . $users[$index * 8 + 1] . "<,>" . $users[$index * 8 + 2] . "<,>" . $users[$index * 8 + 3] . "<,>" . $users[$index * 8 + 4] . "<,>" . $users[$index * 8 + 5] . "<,>" . $users[$index * 8 + 6] . "<,>" . $users[$index * 8 + 7] . "<;>\n";
			$length += length ($output);
			print fHANDLE $output;
		}
		truncate (fHANDLE, $length);
	}

	flock (fHANDLE, 8);
	close (fHANDLE);

	if ($loginfailure || !$loginfound)
	{
		$VARIABLES {"#PARAM Location"} = "/SecurityBreach";
		&_lib_iosity_DrawLocation ();
		exit (0);
	}

	return "";
}
